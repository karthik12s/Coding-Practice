#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int c =0;
    void mergesort(long long  arr[],long long  l,long long  r){
        if(l>=r){
            return;
        }
        long long int mid = (l+r)/2;
        mergesort(arr,l,mid);
        mergesort(arr,mid+1,r);
        long long  cache[r-l+1]={0};
        long long i=l,j=mid+1,k=0;
        while(i<=mid && j<=r){
            if(arr[i]>arr[j]){
                c=c+mid-i+1;
                cache[k++] = arr[j++];
            }
            else{
                cache[k++] = arr[i++];
            }
        }
        while(i<=mid){
            cache[k++] = arr[i++];
        }
        while(j<=r){
            cache[k++] = arr[j++];
        }
        // for(int i=0;i<r-l+1;i++){
        //     cout<<cache[i]<<" ";
        // }
        // cout<<endl;
        k=0,i=l;
        while(k<r-l+1){
            arr[i++] = cache[k++];
        }
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here

        mergesort(arr,0,N-1);
        // for(int i=0;i<N;i++){
        //     cout<<arr[i]<<" ";
        // }
        return c;
    }

};

// { Driver Code Starts.

int main() {

    long long T;
    cin >> T;

    while(T--){
        long long N;
        cin >> N;

        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }

    return 0;
}
  // } Driver Code Ends
